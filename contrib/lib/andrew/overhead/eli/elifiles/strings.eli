;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                   ;;;;
;;;;       Copyright IBM Corporation 1988,1991 - All Rights Reserved   ;;;;
;;;;      For full copyright information see:'andrew/config/COPYRITE'  ;;;;
;;;;                                                                   ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; $Header: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R5/ftp/src/overhead/eli/elifiles/RCS/strings.eli,v 2.4 1991/09/13 17:06:21 bobg Exp $
; $Source: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R5/ftp/src/overhead/eli/elifiles/RCS/strings.eli,v $

(defun a-pat-in-any-str (pattern strs)
  (do ((s strs (cdr s))
       (result nil (re-strcontains pattern (car s))))
      ((or (null s) result) result)))

(defun any-pat-in-any-str (patterns strs)
  (do ((p patterns (cdr p))
       (result nil (a-pat-in-any-str (car p) strs)))
      ((or (null p) result) result)))

(defunv a-str-in-any-str (args)
        (let ((str (car args))
              (strs (car (cdr args)))
              (ignoreCase (car (cdr (cdr args)))))
          (do ((s strs (cdr s))
               (result nil (strcontains str (car s) ignoreCase)))
              ((or (null s) result) result))))

(defunv any-str-in-any-str (args)
        (let ((strs1 (car args))
              (strs2 (car (cdr args)))
              (ignoreCase (car (cdr (cdr args)))))
          (do ((s strs1 (cdr s))
               (result nil (a-str-in-any-str (car s) strs2 ignoreCase)))
              ((or (null s) result) result))))

(defun list-to-str (strs separator)
  (cond ((NULL strs) "")
        ((cdr strs) (strcat (car strs)
                            separator
                            (list-to-str (cdr strs)
                                         separator)))
        (T (car strs))))

(defun str-to-list (str delim)
  (let* ((foo (strdecompose delim str)))
        (cond (foo (cons (car foo)
                         (str-to-list (car (cdr (cdr foo))) delim)))
              (t (list str)))))
