\begindata{text,269519856}
\textdsversion{12}
\template{default}
\define{chapter
menu:[Title~3,Chapter~20]
attr:[Justification LeftJustified Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 16]}
\define{section
menu:[Title~3,Section~21]
attr:[Justification LeftJustified Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 14]}
\define{paragraph
menu:[Title~3,Paragraph~23]
attr:[Justification LeftJustified Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 12]}
\define{majorheading
menu:[Title~3,MajorHeading~10]
attr:[Justification LeftJustified Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[FontFace Italic Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 12]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\define{fieldheading
menu:[Region~4,Fieldheading]
attr:[Justification LeftJustified Point 0]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fieldtext
menu:[Region~4,Fieldtext]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\chapter{tabs}


This class provides routines for handling a list of tabstops. It is used in 
the files text.c, drawtxtv.c, txttroff.c, lookzv.c and tabrulv.c


\section{About this section}


The class \italic{tabs} is a self-contained module, the only major external 
reference being the text_statevector. 


\section{About \italic{tabs}}


A tabs object maintains two arrays: \paramname{Positions} and 
\paramname{Types}. These arrays define each tabstop precisely - 
\paramname{Positions} is the position of the tabstop in points, and 
\paramname{Types} is the type of tabstop, as allowed in style.ch.  The number 
of tabs in these arrays is held in the variable \italic{number}.  Whenever you 
change styles, you typically want to create a new list of tabstops, so to 
prevent using too much memory, references to \paramname{tabs} objects are 
copied instead of creating new tabstops.  The access methods all use a 
"copy-on-write" policy, such that when there is a need to change tabstops 
within a \paramname{tabs} structure, then is when new tablists are created. 
 Reference counts are kept for each \paramname{tabs} object so that they can 
be free'd when possible.

The access methods provided allow you to get a handle on a default tablist and 
copy tablists (neither routine will use new memory - they will just copy 
references to other structures).  For operating on the tablists, you can clear 
all tabs, add or delete individual tabs, compare two tablists, and output a 
troff description of the list.


\section{Using \italic{tabs}}


The class is probably useless outside of the text and textview objects.

To create an instance, the preferred method is to use \italic{tabs_Create()} 
which will return a tabs structure with a list of tabstops in the default 
position.  No new memory will be allocated when calling this routine - it will 
just give you a handle on a default listing. If you ever call a tabs method 
which needs to change the structure, it will allocate memory and copy it into 
a new structure at that time.


The most common use of tabs occurs within the text_statevector structure.  It 
is vitally important that care is exercised when using tabs and state vectors. 
 You should do subtly different things for the three cases: initialized state 
vectors, copied read-only state vectors, and copied read-write state vectors.


For details on this see the txtstvec.doc file.


\section{Author

}
Nick Williams,

njw@athena.mit.edu



\begindata{bp,270071724}
\enddata{bp,270071724}
\view{bpv,270071724,129,0,0}
______________________________________________________				


\paragraph{tabs_Add}

				

\majorheading{Add a tabstop

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_Add }(}\fixedindent{

struct tabs *\paramname{tabs},

long \paramname{pos},

enum style_TabAlignment \paramname{op});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Adds a tabstop at position pos points across of type op.  pos 
should not be negative.

}

\fieldheading{Return Value}

\fieldtext{It returns a handle to a possibly new tabs structure.  If the tabs 
structure passed in was merely a link to another tabs structure, the link will 
be broken and a new tabs structure created.

}

\fieldheading{Usage}

\fieldtext{Whenever you want to add a tabstop into a list of currently 
existing tabstops, call this.\fieldtext{

}}

\fieldheading{Example}


\fieldtext{\fixedtext{struct tabs *tabs;

tabs = tabs_Create();

tabs = tabs_Add(tabs, 12, style_LeftAligned);\fieldtext{

}}}
\begindata{bp,270063008}
\enddata{bp,270063008}
\view{bpv,270063008,130,0,0}
______________________________________________________				


\paragraph{tabs_ApplyChange}

				

\majorheading{Change tabstops

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_ApplyChange }(}\fixedindent{

struct tabs *\paramname{tabs},

struct tabentry *\paramname{change});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Changes a tabs structure by the operations defined in tabentry. 

}

\fieldheading{Return Value}

\fieldtext{A pointer to the changed tabs.

}

\fieldheading{Usage}

\fieldtext{Used in conjunction with \italic{style_GetTabChangeList}, which 
gives you a list of these tabentry's.\fieldtext{

}}

\fieldheading{Side Effects}

\fieldtext{A new tabs tructure might be created if the entry passed in was 
referenced by anyone else.

}

\fieldheading{See Also}

\fieldtext{style_GetTabChangeList (atk/support/style.c)

}

\fieldheading{Example}


\fieldtext{\fixedtext{long numTabChanges;

struct tabentry **TabChangeArray;\fieldtext{

}int i;


style_GetTabChangeList(style, &numTabChanges, &TabChangeArray);

for (i = 0; i < numTabChanges; i++)

	tabs = tabs_ApplyChange(tabs, TabChangeArray[i]);

if (TabChangeArray)

	free(TabChangeArray);

}}
\begindata{bp,270082940}
\enddata{bp,270082940}
\view{bpv,270082940,131,0,0}
______________________________________________________				


\paragraph{tabs_Clear}

				

\majorheading{Clear All Tabs

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_Clear }(}\fixedindent{

struct tabs *\paramname{tabs});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Clears all tabstops defined in the list.  \fieldtext{

}}

\fieldheading{Return Value}

\fieldtext{A pointer to the new tabs structure.

}

\fieldheading{Usage}

\fieldtext{Whenever you want to clear all the tabs, e.g. after a 
style_AllClear.\fieldtext{

}}

\fieldheading{Side Effects}

\fieldtext{A new tabs structure may be created, if the old is being referenced 
by someone else.

}

\fieldheading{Example}


\fieldtext{\fixedtext{if (op == style_AllClear)

	tabs = tabs_Clear(tabs);\fieldtext{

}}}
\begindata{bp,270079620}
\enddata{bp,270079620}
\view{bpv,270079620,132,0,0}
______________________________________________________				


\paragraph{tabs_Copy}

				

\majorheading{Get a copy of another set of tabstops.

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_Copy }(}\fixedindent{

struct tabs *\paramname{tabs});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Copies the tabs structure passed in and returns you a handle. 
Actually, all it really does, is pass you back the same pointer that came in, 
but you don't know that. (It also increments the count of observers on the 
tabs structure, so it is useful, honest!)

}

\fieldheading{Return Value}

\fieldtext{A pointer to the copy.

}

\fieldheading{Usage}

\fieldtext{Whenever you want to get a new list of tabs which has the same 
initial tabstops defined as another tabs structure.\fieldtext{

}}

\fieldheading{See Also}

\fieldtext{tabs_Create()

}

\fieldheading{Example}


\fieldtext{\fixedtext{if (oldtabs)

	newtabs = tabs_Copy(oldtabs);

else

	newtabs = tabs_Create();\fieldtext{

}}}
\begindata{bp,269890732}
\enddata{bp,269890732}
\view{bpv,269890732,133,0,0}
______________________________________________________				


\paragraph{tabs_Create}

				

\majorheading{Return a set of default tabstops

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_Create }(}\fixedindent{);}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Returns you a tabs structure which contains tabstops at all the 
default positions (every 1/2 inch 

}
\fieldheading{Return Value}

\fieldtext{A pointer to a tabs structure.

}

\fieldheading{Usage}

\fieldtext{Use this whenever you want to create new tabs - By using this 
instead of \italic{tabs_New}(), you are saving loadsa memory. You should not 
use \italic{tabs_New}().\fieldtext{

}}

\fieldheading{See Also}

\fieldtext{tabs_Copy

}
\begindata{bp,270084584}
\enddata{bp,270084584}
\view{bpv,270084584,134,0,0}
______________________________________________________				


\paragraph{tabs_Death}

				

\majorheading{Destroy a tablist

}______________________________________________________


\fixedtext{void \bold{tabs_Death }(}\fixedindent{

\fixedindent{struct tabs *tabs}

}\fixedindent{);}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Destroys a tablist, ensuring that if it is referenced by other tab 
structures, nothing gets broken.\fieldtext{

}}

\fieldheading{Usage}

\fieldtext{Use this whenever you want to destroy a tabs structure.\fieldtext{

}}

\begindata{bp,270082896}
\enddata{bp,270082896}
\view{bpv,270082896,135,0,0}
______________________________________________________				


\paragraph{tabs_Delete}

				

\majorheading{Remove one tab from the tabstops

}______________________________________________________


\fixedtext{struct tabs *\bold{tabs_Delete }(}\fixedindent{

struct tabs *\paramname{tabs},

int \paramname{n});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Deletes the \italic{n'th} tab from the list of tabstops. 
\paramname{n} must be between 0 and \italic{number}, where \italic{number} is 
the number of tabs in the list.

}

\fieldheading{Return Value}

\fieldtext{A pointer to the new list of tabs.

}

\fieldheading{Usage}

\fieldtext{Whenever you want to get rid of a tab from the list.\fieldtext{

}}

\fieldheading{Error Conditions}

\fieldtext{Undefined if you pass in an illegal value of n.

}

\fieldheading{Side Effects}

\fieldtext{May create a new tab structure if the old is being referenced by 
someone else.

}
\begindata{bp,269224436}
\enddata{bp,269224436}
\view{bpv,269224436,136,0,0}
______________________________________________________				


\paragraph{tabs_Different

}				

\majorheading{Compare two sets of tabstops

}______________________________________________________


\fixedtext{int \bold{tabs_Different }(}\fixedindent{

struct tabs *\paramname{tabs},

struct tabs *\paramname{b});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Compares two tabs structures to see if all the tabs defined are at 
the same positions and of the same types.

}

\fieldheading{Return Value}

\fieldtext{Returns 1 if the number of tabs in each is different or if any one 
tab is either of a different type or at a different position from the other.

Else returns 0.

}

\fieldheading{Usage}

\fieldtext{When you want to find out if the tabs have changed of course! 
:-)\fieldtext{

}}

\fieldheading{Example}


\fieldtext{\fixedtext{if (tabs_Different(oldtabs, newtabs))

	tabs_OutputTroff(newtabs);

}}
\begindata{bp,269955156}
\enddata{bp,269955156}
\view{bpv,269955156,137,0,0}
______________________________________________________				


\paragraph{tabs_OutputTroff

}				

\majorheading{Output troff command to set tabstops

}______________________________________________________


\fixedtext{void \bold{tabs_OutputTroff }(}\fixedindent{

struct tabs *\paramname{tabs},

long \paramname{left},

FILE *\paramname{file});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Outputs a troff description to \paramname{file}, of the tabs 
defined.  Only tabstops at positions greater than \paramname{left} will be 
output, and a left-aligned tab will be placed at position \paramname{left} if 
it is non-zero.

}

\fieldheading{Known Bugs}

\fieldtext{Only \italic{LeftAligned}, \italic{RightAligned} and 
\italic{CenteredOnTab} types are output at present (that's all that troff 
understands). If it is any other type, it will get ignored.

}

\fieldheading{See Also}

\fieldtext{atk/text/drawtxtv.c

}



\enddata{text,269519856}
