	NEW FUNCTIONALITY IN THE BASE DPS CLIENT LIBRARY

Copyright (C) 1991 by Adobe Systems Incorporated.
All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notices appear in all copies and that
both those copyright notices and this permission notice appear in
supporting documentation and that the name of Adobe Systems
Incorporated not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.  If any portion of this software is changed, it cannot be
marketed under Adobe's trademarks and/or copyrights unless Adobe, in
its sole discretion, approves by a prior writing the quality of the
resulting implementation.

ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND
NON-INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.

PostScript, Display PostScript, and Adobe are trademarks of Adobe Systems
Incorporated registered in the U.S.A. and other countries.

Author: Adobe Systems Incorporated

--------------------------------------------------------------------------

This document describes changes to the Display PostScript programming
library (libdps.a) made since the creation of the Display PostScript
reference binder.  (The contents of the binder are in the various PostScript
files in this directory.)

LIBRARY CONSOLIDATION:

Some earlier releases of the client library were in two pieces; a set of
procedures included in the X extension library libXext.a and a set of
procedures in a separate library libdps.a.  This is no longer the case;
libdps.a contains the entire library.  The DPS library must be linked in
ahead of Xlib; the canonical link line includes "-ldps -lX11".

EVENT DISPATCHING:

The Display PostScript interface library normally dispatches events from the
DPS/X extension in its wire-to-event converter; these events do not show up
in the normal X event stream.  This causes problems with various software
libraries (the R4 Xt library among others) that assume that there being
something to read on a connection means that XNextEvent will not block on
that connection.  The resulting call to XNextEvent does not return until
there is an actual X event to dispatch; this can cause applications to hang
until the user does something to generate an event.

Further, event handlers invoked using the normal internal dispatching
scheme can not make DPS or X calls, since Xlib is not reentrant at this
level.  If the handler needs to make DPS or X calls, it must set a flag or
queue a task to be done outside of the handler.  The resulting program logic
can be complex.


An application can direct the client library not to dispatch DPS events
through the wire-to-event converter by calling XDPSSetEventDelivery:

typedef enum {dps_event_pass_through, dps_event_internal_dispatch,
	      dps_event_query} DPSEventDelivery;

DPSEventDelivery XDPSSetEventDelivery(Display *dpy,
				      DPSEventDelivery newMode);

XDPSSetEventDelivery always returns the previous event delivery mode for the
specified display.  If newMode is dps_event_query it does nothing else.

If newMode is dps_event_internal_dispatch, the client library behaves exactly
as it currently does.  This is the default value.

If newMode is dps_event_pass_through, the client library stops dispatching
events internally and passes them through to the application as normal X
events.


XDPSDispatchEvent checks whether an event is a DPS event and, if so, 
dispatches it to the appropriate status or output handler:

Bool XDPSDispatchEvent(XEvent *event);

If the event is not a DPS event, XDPSDispatchEvent returns False and
does nothing else.

If the event is a DPS event, XDPSDispatchEvent determines the context
from the event, calls the context's status or output handler, and returns
True.

With the exception stated below (in "Wrap Considerations") status and
output handlers that were invoked through XDPSDispatchEvent can call wraps
and Xlib procedures with impugnity.  This is not the case with handlers
invoked with internal dispatching; these handlers may not make any X or DPS
calls.


Bool XDPSIsDPSEvent(XEvent *event);

XDPSIsDPSEvent returns True if the event is a DPS event and False otherwise.


Bool XDPSIsStatusEvent(XEvent *event, DPSContext *ctxt, int *status);

XDPSIsStatusEvent returns True if the event is a DPS status event and False
otherwise.  If the event is a status event, ctxt and status are set to the
context and the status from the event; either can be NULL if the information
is not needed.

If a status event is passed to XDPSDispatchEvent, the status procedure for
the context will be called.  Programs are not required to do this; they are
free to use the returned context and status information to handle the status
event in place.

The contents of a status event are not defined; the returned context and
status values are the only way to extract the information from the event.


Bool XDPSIsOutputEvent(XEvent *event);

XDPSIsOutputEvent returns True if the event is a DPS output event and False
otherwise.  If it returns True, the contents of an output event are not
defined and the event must be passed to XDPSDispatchEvent.  If the
application does not pass the event to XDPSDispatchEvent, the results are
undefined.

Equivalents:

XDPSIsDPSEvent(&event)
  is equivalent to
(XDPSIsStatusEvent(&event, NULL, NULL) || XDPSIsOutPutEvent(&event)).

XDPSDispatchEvent(&event)
  is equivalent to
{
    if (XDPSIsStatusEvent(&event, NULL, NULL)) {
	<Call status event handler>
	return True;
    } else if (XDPSIsOutputEvent(&event)) {
	<call output event handler>
	return True;
    } else return False;
}


WRAP CONSIDERATIONS:

When an application calls a wrap that returns a value, the client library
must wait for the results.  During this wait, status and output events can
arrive, and the client library will dispatch these events to the appropriate
event handler; this dispatching will be done according to the current event
dispatching mode.  With pass-through event dispatching, the handlers can call
wraps that do not return values, Xlib procedures, and DPS procedures other
than DPSWaitContext.  However, handlers invoked at this point cannot call
DPSWaitContext or a wrap that returns a value; if they do, the error
dps_err_recursiveWait will occur.

The recommended way to avoid this problem is make sure that event handlers
never call DPSWaitContext or wraps that return values.

If the error dps_err_recursiveWait occurs, both wraps will usually return
incorrect values and further errors may be triggered; any application that
handles its own errors should treat this as a fatal error.

OTHER CHANGES:

XDPSRegisterStatusProc now return the old status procedure when a new one is
registered.


void XDPSGetDefaultColorMaps(Display *dpy, Screen *screen,
	Drawable drawable, XStandardColormap *colorcube,
	XStandardColormap *grayramp);

Returns the colormaps used in creating a simple context.  The display must be
specified.  If screen is NULL and drawable is None, the colormaps are
retrieved for the default screen of the display.  If screen is NULL and
drawable is not None, the colormaps are retrieved for the drawable's screen.
If screen is not NULL, the colormaps are retrieved for the that screen.
Either colorcube or grayramp may be NULL, indicating that that colormap
is not needed.


NOTES:

Applications that use pass-through event delivery must not use
XtAppProcessEvent to handle X events; XtAppProcessEvent will drop the
extension events on the floor.  It is still safe to use XtAppProcessEvent
with a mask of XtIMTimer or XtIMAlternateInput, but it must not be called
with a mask of XtIMXEvent or XtIMAll.

Always call XDPSDispatchEvent before calling XtDispatchEvent.  The R4 version
of XtDispatchEvent has a bug that can cause it to dump core when passed an
extension event.  The canonical main loop is

while (1) {
	XEvent event;
	XtAppNextEvent(app, &event);
	if (!XDPSDispatchEvent(&event) && !XtDispatchEvent(&event) {
		/* Handle undispatched event */
	}
}


