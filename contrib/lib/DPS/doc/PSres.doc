		LOCATING POSTSCRIPT RESOURCES

Copyright (C) 1991 by Adobe Systems Incorporated.
All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notices appear in all copies and that
both those copyright notices and this permission notice appear in
supporting documentation and that the name of Adobe Systems
Incorporated not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.  If any portion of this software is changed, it cannot be
marketed under Adobe's trademarks and/or copyrights unless Adobe, in
its sole discretion, approves by a prior writing the quality of the
resulting implementation.

ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND
NON-INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.

PostScript, Display PostScript, and Adobe are trademarks of Adobe Systems
Incorporated registered in the U.S.A. and other countries.

Author: Adobe Systems Incorporated

--------------------------------------------------------------------------

Applictions that use the PostScript language need to be able to locate files
describing and containing PostScript objects.  Among the kinds of files
needed are Adobe Font Metric files (AFM files), font outline files, and
PostScript language procedure sets.  These are collectively referred to as
PostScript resource files.  In many cases these resource files are installed
system-wide, for example the AFM files for the fonts resident on the systems
PostScript printers.  In other cases these resource files are private to a
user, for example private font outlines the user has purchased or procedure
sets for a private application.  PostScript resource database files allow
applications to locate PostScript resource files uniformly.


POSTSCRIPT RESOURCE DATABASE FILES

The format of a PostScript resource database file is as follows:

	No line may exceed 255 characters.

	Backslash (\) may be used to quote any character; the two character
	sequence \x represents the character x for any printing x.  Lines in
	specific parts of the file, as listed in the following paragraphs,
	may be continued by ending them with a backslash immediately before
	the newline.  Any line other than a section terminator that begins
	with a period must quote the period with a backslash.

	Alphabetic case is relevant everywhere in the file.
	
	Comments may be included on any line by preceding them with a percent
	sign.  A percent sign may be quoted with a backslash to avoid making
	it begin a comment.

	Trailing blanks and tab characters are ignored everywhere in the
	file, but do count towards the 255-character line length limit.

	The first line contains the constant string PS-Resources-1.0
	or the constant string PS-Resources-Exclusive-1.0.  The difference
	between these is explained later.

	The next set of lines list the kinds of resources described in this
	file.  Each line contains a single resource type, terminated by a
	newline character.  This section is terminated with a line containing
	a single period.  See later in this document for the set of
	predefined resource types; however, any string may be used.  Lines in
	this section can be continued with a backslash.

	If the next line begins with a slash (/), the rest of the line is a
	directory prefix to be added to all file names in this file.  If the
	next line does not begin with a slash, the directory containing the
	PostScript resource database file is the directory prefix.  Note that
	in an operating system where slash is the first character of a fully
	qualified path, this line must begin with two slashes -- one to flag
	it as a directory line, and one to begin the prefix.  This line can
	be continued with a backslash. 

	There follows one section for each resource type listed in the type
	list, and these sections must be in the same order as the types in
	the type list.  A section consists of a line containing the resource
	type, followed by lines describing the resource, ending with a line
	containing a single period.  The resource type and resource lines can
	be continued with a backslash.

	Each resource line contains the name of the resource, a single
	equal sign, and the name of the file containing the resource.  If the
	name of the resource contains an equal sign, a backslash can be used
	for quoting.  Equals in the file name need not be quoted.  The file
	name may be either an absolute or relative path name as appropriate
	for the operating system.  If it is a relative path name, it is
	interpreted relative to the directory prefix described above.

Here is an example PostScript resource database file.

PS-Resources-1.0
FontOutline			% This section lists resource types
FontPrebuilt
FontAFM
FontFamily
FontBDF
FontBDFSizes
.				% This line ends the resource type listing
//user/local/PS/resources	% All the files are in this directory
FontOutline			% This section lists font outline files
Trajan-Bold=Trajan-Bold
Trajan-Regular=Trajan-Regular
.
FontPrebuilt			
Trajan-Bold=Trajan-Bold.bepf
Trajan-Regular=Trajan-Regular.bepf
.
FontAFM
Trajan-Bold=Trajan-Bold.afm
Trajan-Regular=Trajan-Regular.afm
.
FontFamily
Trajan=Bold,Trajan-Bold,Regular,Trajan-Regular
.
FontBDF
Trajan-Regular18-75-75=Trajan-Regular.18.bdf
Trajan-Regular24-75-75=Trajan-Regular.24.bdf
Trajan-Regular36-75-75=Trajan-Regular.36.bdf
Trajan-Regular48-75-75=Trajan-Regular.48.bdf
Trajan-Bold18-75-75=Trajan-Bold.18.bdf
Trajan-Bold24-75-75=Trajan-Bold.24.bdf
Trajan-Bold36-75-75=Trajan-Bold.36.bdf
Trajan-Bold48-75-75=Trajan-Bold.48.bdf
.
FontBDFSizes
Trajan-Regular=18-75-75,24-75-75,36-75-75,48-75-75
Trajan-Bold=18-75-75,24-75-75,36-75-75,48-75-75
.

The following resource type names are predefined:

FontOutline
	The file is a PostScript font outline file.

FontPrebuilt
	The file contains a set of prebuilt font bitmaps.  Currently only
	Display PostScript uses this format.

FontAFM
	The file is an Adobe Font Metric file.

FontBDF
	The file contains a bitmap font in Bitmap Distribution Format

FontFamily
	The file name in this case is not really a file name, but is
	instead a list of FontOutline resource names in the current file
	whose FamilyName is equal to the FontFamily resource name.  Each is
	preceded by the face name for that font.  The names are separated
	with a single comma (,) character; a backslash quotes a comma within
	a font name.  The directory prefix does not apply to this resource
	type.

FontBDFSizes
	The file name in this case is not really a file name, but is
	instead a list indicating which FontBDF resources are in the
	current file.  Each entry consists of the point size, the x
	resolution, and the y resolution of the BDF file, separated with a
	single hyphen (-) character, and the entries are separated with a
	single comma (,) character.  Each entry may be appended to the
	resource name on the line to yield a valid FontBDF resource.  The
	directory prefix does not apply to this resource type.

Form
	The file contains a form definition, as defined in PostScript Level 2.

Pattern
	The file contains a pattern definition, as defined in PostScript
	Level 2.

Encoding
	The file contains a character set encoding, as defined in PostScript
	Level 2.

ProcSet
	The file contains a named set of PostScript procedures implementing
	some piece of an application's prolog.

mkpsresPrivate
	The utility, makepsres, generates and manipulates PostScript resource
	database files.  This section contains private information stored by
	makepsres to help it in future invocations.

Further predefined types will be added to represent additional
resources as they become necessary.


LOCATING POSTSCRIPT RESOURCE DATABASE FILES:

A user's PSRESOURCEPATH environment variable consists of a colon-separated
list of directories.  Routines that look for PostScript resource database
files will look for them in each directory named in the PSRESOURCEPATH
environment variable.

Two adjacent colons in the PSRESOURCEPATH path represent the default
list of places a particular component looks for PostScript resources.  This
default place may be different for each component and is determined in a
component-dependent way (usually configuration at system build time).  A
missing PSRESOURCEPATH variable is equivalent to the value "::" and is the
normal value for users who have not installed private resources.  Users with
private resources will normally begin or end the path with a double colon,
depending upon whether they want their resources to override the system
defaults.  Colons in the path can be quoted in a system-dependent way; on
Unix a backslash quotes colons.

A typical PSRESOURCEPATH value would be "::/proj/ourproj/PS:/user/smith/ps".
This instructs the routines that locate PostScript resource database files to
first look in the default place, wherever it may be, then in the directory
/proj/ourproj/PS, and then in the directory /user/smith/ps.  The user does
not need to know or care where the default resource database files 

PostScript resource database files end with the suffix ".upr" (for Unix
PostScript Resources) on Unix systems.  The principal PostScript resource
database file in a directory is named PSres.upr.  If the first line of a
PSres.upr file is PS-Resources-Exclusive-1.0, the PSres.upr file is the only
PostScript resource database file in its directory.  If the first line is
PS-Resources-1.0, or if there is no PSres.upr file, any other file in the
same directory with the extension .upr is also a PostScript resource database
file and is considered to be logically part of the PSres.upr file.  For
example, the above sample file might be called Trajan.upr.

Having the PSres.upr file begin with PS-Resources-Exclusive-1.0 implies a
commitment to merge the descriptions of any future PostScript resource files
into the PSres.upr file.  In return, the resource location routines will run
more quickly since they don't need to look for other .upr files.


RESOURCE LOCATION ROUTINES

If you are writing an application or library that needs to locate PostScript
resource files, use the PostScript resource location library, libpsres.a.
The routines it containts locate and parse .upr files and return lists of
resource files.  The header file for libpsres.a is <DPS/PSres.h>.

These routines represent resource types as character strings.  This allows
the matching of arbitrary strings that may be in the resource type list of a
PostScript resource database file.  The following variables evaluate to the
appropriate character string; using these variables instead of the strings
themselves allows the compiler to find spelling errors that would otherwise
go undetected within the character string.

extern char *PSResFontOutline, *PSResFontPrebuilt, *PSResFontAFM,
	*PSResFontBDF, *PSResFontFamily, *PSResFontBDFSizes,
	 *PSResForm, *PSResPattern, *PSResEncoding, *PSResProcSet;

In the following discussion, the phrase "resource location procedure" refers
to ListPSResourceFiles, EnumeratePSResourceFiles, or ListPSResourceTypes, but
not to CheckPSResourceTime.


extern int ListPSResourceFiles(
	char *psResourcePathOverride;
	char *defaultPath;
	char *resourceType;
	char *resourceName;
	char **resourceNamesReturn;
	char **resourceFilesReturn;
);

psResourcePathOverride	Provides a path that overrides the environment PS
			resource path.  On Unix systems it replaces the
			PSRESOURCEPATH environment variable.  Usually NULL.
			Colons may be quoted in the path with backslashes.

defaultPath 		The path that will be inserted between adjacent
			colons in the PS resource path; may be NULL.

resourceType		Indicates the type of resource desired.

resourceName		Indicates the resource name desired.  If NULL,
			returns a list of all resource names of the specified
			type.

resourceNamesReturn	Returns a list of the resource names.

resourceFilesReturn	Returns a list of the resource files.

The return value is the number of entries in the resourceNamesReturn array.
A return value of 0 means that no such resouces could be found and
resourceNamesReturn and resourceFilesReturn will be unmodified.

The file names in resourceFilesReturn will always be absolute path names.
All strings will have had backslash quoting removed, except that backslashes
that quote commas in the file name portion will remain.  This supports comma
quoting for the FontFamily resource type.

If a particular resource name occurs more than once in the same or in
different PS resource directories, all occurences will be returned,
in the following order:
	- All resources for a particular directory entry in the resource
	search path will occur before any entries for a later directory.
	- For a particular directory, all resources found in PSres.upr files
	will occur before any entries found in subsidiary PostScript resource
	directory files.

The resourceNamesReturn and resourceFilesReturn arrays should be freed
when no longer needed.  The individual strings should not be freed.

The resourceNamesReturn and resourceFilesReturn arrays will always have
the same number of entries, equal to the return value.

The strings pointed to in the resourceNamesReturn and resourceFilesReturn are
valid until a resource location procedure is called with a different value of
psResourcePathOverride or of defaultPath, or FreePSResourceStorage is called.


Applications can determine which resource types are available by calling
ListPSResourceTypes:

extern int ListPSResourceTypes(
	char *psResourcePathOverride;
	char *defaultPath;
	char **resourceTypesReturn;
);

psResourcePathOverride	Provides a path that overrides the environment PS
			resource path.  On Unix systems it replaces the
			PSRESOURCEPATH environment variable.  Usually NULL.
			Colons may be quoted in the path with backslashes.

defaultPath 		The path that will be inserted between adjacent
			colons in the PS resource path; may be NULL.

resourceTypesReturn	Returns a list of the resource types.

The return value is the number of entries in the resourceTypesReturn array.
A return value of 0 means that no resource types could be found and
resourceTypesReturn will be unmodified.

The resourceTypesReturn array should be freed when no longer needed.  The
individual strings should not be freed and will remain valid until a resource
location procedure is called with a different value of psResourcePathOverride
or of defaultPath, or FreePSResourceStorage is called with the everything
parameter nonzero.

The returned resource types will be merged so that no resource type appears
more than once.  The special type mkpsresPrivate will not be returned.


The subroutine library normally keeps internal state to avoid reading
directory files each time.  Calling FreePSResourceStorage frees any storage
currently used.

void FreePSResourceStorage(
	int everything;
);

everything	If nonzero FreePSResourceStorage completely resets its state.

If everything is zero, FreePSResourceStorage allows ListPSResourceFiles to
keep some minimal information, normally which files in the search path
contain which resource types.  If everything is nonzero, no information is
retained.

Calling a resource location procedure with a different value of
psResourcePathOverride or of defaultPath from the previous call implicitly
calls FreePSResourceStorage(1).  FreePSResourceStorage invalidates any string
pointers that were returned by previous calls to ListPSResourceFiles or
ListPSResourceTypes.


An application can provide hints to ListPSResourceFiles about the expected
pattern of future calls by calling SetPSResourcePolicy.

typedef enum {PSSaveReturnValues, PSSaveByType, PSSaveEverything}
	PSResourceSavePolicy;

void SetPSResourcePolicy(
	PSResourceSavePolicy policy;
	int willList;
	char **resourceTypes;
);

policy		Determines the save policy used.

willList	Nonzero if the application ever expects to list resources by
		passing NULL to ListPSResourceFiles in the resourceName
		parameter.

resourceTypes	A NULL-terminated list of the resource types the application
		expects to use, or NULL.

SetPSResourcePolicy determines how much state the resource location procedures
maintain:

	PSSaveEverything - The first time it is called with a particular
	set of values for psResourcePathOverride and defaultPath,
	ListPSResourceFiles or ListPSResourceTypes reads all PostScript
	resource directory files in the specified paths and caches all the
	information therein.  Future calls will not read the file system.

	PSSaveByType - ListPSResourceFiles will save information about
	the resource types in the resourceTypes arguments, but may not for
	other resource types.  It is undefined whether and how much other
	information gets saved.  Calls to ListPSResourceFiles for resource
	types not in the resourceTypes list may or may not save all values.

	PSSaveReturnValues - ListPSResourceFiles is guaranteed to save the
	returned strings, but may save little else.  Subsequent calls will
	probably access the file system.  It is undefined whether and how
	much other information gets saved, but applications can expect it to
	be minimal.

There is no way to completely disable saving since the saved strings are
returned by ListPSResourceFiles.

The willList flag should be set if the application ever expects to call
ListPSResourceFiles with a NULL resource name.

The resourceTypes list indicates which resource types the application expects
to call ListPSResourceFiles for.

Note that willList and resourceTypes are just hints; ListPSResourceFiles
will work correctly regardless.  It may, however, work more slowly.

Calling SetPSResourcePolicy more than once will change the future behavior of
ListPSResourceValues, but has no effect on previously saved state.


Applications that wish to take complete control of saving the names should
use EnumeratePSResourceFiles instead of ListPSResourceFiles:

typedef int *(PSResourceEnumerator)(
/*
	char *resourceType;
	char *resourceName;
	char *resourceFile;
	char *private;
*/
);

void EnumeratePSResourceFiles(
	char *psResourcePathOverride,
	char *defaultPath,
	char *resourceType,
	char *resourceName,
	PSResourceEnumerator enumerator;
	char *private;
);

psResourcePathOverride	Provides a path that overrides the environment PS
			resource path.  On Unix systems it replaces the
			PSRESOURCEPATH environment variable.  Usually NULL.
			Colons may be quoted in the path with backslashes.

defaultPath 		The path that will be inserted between adjacent
			colons in the PS resource path; may be NULL.

resourceType		Indicates the type of resource desired.

resourceName		Indicates the resource name desired.  If NULL,
			returns a list of all resource names.

enumerator		Provides a procedure that will be called for each
			resource name.

private			Specifies data that will be passed uninterpreted to
			the enumerator.

EnumeratePSResourceFiles will call the specified enumerator for each resource
that matches the resourceType and resourceName (if non-NULL).  The
enumerator is expected to copy the resource name and file into non-volatile
storage before returning; the resourceType field is passed to the enumerator
simply for information and need not be copied.  If the enumerator returns a
non-zero value, EnumeratePSResourceFiles returns without enumerating
further resources.

EnumeratePSResourceFiles causes minimal state to be saved, for example,
which resource files contain which resources.  FreePSResourceStorage(1) will
free this state.


Applications can check if the access times of directories in the paths have
been changed since the directories were read in by calling
CheckPSResourceTime.

int CheckPSResourceTime(
	char *psResourcePathOverride,
	char *defaultPath;
);

psResourcePathOverride	Provides a path that overrides the environment PS
			resource path.  On Unix systems it replaces the
			PSRESOURCEPATH environment variable.  Usually NULL.
			Colons may be quoted in the path with backslashes.

defaultPath 		The path that will be inserted between adjacent
			colons in the PS resource path; may be NULL.

If either path value is different from that used in the previous call to the
library, CheckPSResourceTime returns 1.  If both are the same,
CheckPSResourceTime determines whether the modification time for any directory
described in the paths is more recent than the latest modification time when
the directories were scanned for resource files, and, if so, returns 1.
Otherwise CheckPSResourceTime returns 0.

CheckPSResourceTime never frees any storage and can never make storage
previously returned from ListPSResourceFiles or ListPSResourceTypes invalid.


MEMORY AND ERROR HANDLING:

An application using these procedures can provide its own implementation of
malloc, realloc, and free by assigning values to the external variables
PSResMalloc, PSResRealloc, and PSResFree:

typedef char *(*PSResMallocProc)(
/*
	int size;
*/
);
extern PSResMallocProc PSResMalloc;

typedef char *(*PSResReallocProc)(
/*
	char *ptr;
	int size;
*/
);
extern PSResReallocProc PSResRealloc;

typedef void (*PSResFreeProc)(
/*
	char *ptr;
*/
);
extern PSResFreeProc PSResFree;

These procedures must provide the following additional semantics beyond that
supplied by the system allocation routines:

	PSResMalloc and PSResRealloc must never return NULL; if they return
	at all they must return the storage.

	PSResFree must just return if passed NULL.

	PSResRealloc must allocate storage if passed a NULL pointer.

The default routines give an error message and terminate if they are unable
to allocate needed storage.

If a .upr file that does not conform to the standard format is encountered, a
warning handler will be called.  The default warning handler prints a warning
message with the file name on stderr and continues.  A different warning
handler can be installed by assigning a value to the external variable
PSResFileWarningHandler.

typedef void (*PSResFileWarningHandlerProc)(
/*
	char *fileName;
	char *extraInfo;
*/
);
extern PSResFileWarningHandlerProc PSResFileWarningHandler;
