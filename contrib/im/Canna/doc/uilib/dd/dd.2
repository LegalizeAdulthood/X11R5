２．２  複数機能シ−ケンス／複数キ−シ−ケンス処理

  カスタマイズでキ−の割り当ての変更登録については４章で述べる。

 (1)複数機能シ−ケンスの処理。

  ここでは次のカスタマイズ指定があったものとして述べる。

      yomi  ｛
        hiragana,henkan,kouhoIchiran         Xfer
      ｝

  モ−ド構造体、キ−テ−ブル及び複数機能シ−ケンスは次のように展開され
  ている。 ── で囲んだ部分がカスタマイズによって登録されたもの


         モード構造体
        ┌──────┐
        │ simplefunc │
        ├──────┤         キーテーブル
        │キーテーブル│───→┌─────┐
        ├──────┤        │          │
        │   フラグ   │        │          │
        ├──────┤        ├─────┤
        │関数テーブル│──┐  │   Xfer   ┼─  IROHA_FN_FuncSequence
        └──────┘    │  ├─────┤
                            │  │          │
                            │  └─────┘
                            │    関数テーブル
                            └→┌─────┐
                                │          │
                                ├─────┤
                                │      ──┼─  DoFuncSequence
                                ├─────┤
                                │          │
                                └─────┘

 同じハッシュキ−

                                  ┌───────┐
  ハッシュテーブル                │              │
  ┌─────┐  ┌→┌──────┐  ┌→┌──────┐
  │          │─┘  │キーテーブル│  │  │キーテーブル│
  ├─────┤      ├──────┤  │  ├──────┤
  ├─────┤      │    キー    │  │  │    キー    │
  │          │      ├──────┤  │  ├──────┤
  │    :     │  ┌─│複数機能 Seq│  │┌│複数機能 Seq│
  │          │  │  ├──────┤  ││├──────┤
  └─────┘  │  │    next    │─┘││    next    ┼これ以上無いとき
                  │  └──────┘    │└──────┘はNULL。
                  │                      │
                  │  複数機能 Sequence   │                    複数機能 Seq
                  └→┌──┐            └───────────→┌──┐
                      │ 39 │                                      │    │
                      ├──┤ 例えば、hiragana,henkan,kouhoIchiran │    │
                      │ 24 │ であれば、                           │    │
                      ├──┤hiragana     → IROHA_FN_Hiragana = 39│    │
                      │ 32 │henkan       → IROHA_FN_Henkan   = 24│    │
                      ├──┤kouhoIchiran → IROHA_FN_kouhoIchiran │    │
                      │NULL│                                  = 32│    │
                      └──┘ なので、左図のようになる。           └──┘



  <1> ２．１の(1)〜(3)までの処理を同様に行ないモ−ド構造体中の
  simplefuncを実行する。

    複数の機能に対しある１つのキ−を割り当てるカスタマイズをした場合、
    そのキ−の機能はIROHA_FN_FuncSequence である。

    また、そのキ−の機能で関数テ−ブルを参照すると関数DoFuncSequenceへ
    のポインタが得られる。

  <2> 関数DoFuncSequenceを実行すると関数_DoFuncsequence が呼び出される。
    
  <3> 関数_DoFuncSequence では、モ−ド構造体中のキ−テ−ブルのアドレス
    とキ−によりハッシュキ−を作成して、ハッシュテ−ブルから複数機能シ
    −ケンスを得る。

  <4> 関数_DofuncSequence では、複数機能シ−ケンスを１バイトずつ取り出
    してNULLが来るまで繰り返し（２．１(6)〜(9)）を呼んで処理する。


  (2)複数キ−シ−ケンスの処理。

  ここでは次のカスタマイズ指定があったものとして述べる。

      yomi  ｛
        hiragana,henkan,kouhoIchiran         F1,F2,Xfer
      ｝

  モ−ド構造体及びキ−テ−ブルは次のように展開されている。── で囲ん
  だ部分がカスタマイズによって登録されたもの

            構造体１
┌──→┌──────┐
│      │ simplefunc │
│      ├──────┤         キーテーブル１
│      │キーテーブル│───→┌─────┐
│      ├──────┤        │          │
│      │   フラグ   │        ├─────┤
│      ├──────┤        │    F1    ┼  IROHA_FN_UseOtherKeymap
│      │関数テーブル│──┐  ├─────┤
│      └──────┘    │  │          │
│                          │  └─────┘
└  FIが渡された時、uiCont  │    関数テーブル
    ext が指している構造体  └→┌─────┐
                                │          │
                                ├─────┤
                                │        ─┼─  UseOtherKeymap
                                ├─────┤
                                │          │
                                └─────┘

                                 同じハッシュキ−
                              ┌─────────┐
   ハッシュテーブル           │                  │
  ┌────┐──→┌──────┐    ┌→┌──────┐
  ├────┤┐    │キーテーブル│    │  │キーテーブル│
  ├────┤│    ├──────┤    │  ├──────┤
  ├────┤│    │  キー(F1)  │    │  │    キー    │
  │   :    ││    ├──────┤    │  ├──────┤
  │   :    ││┌─│モード構造体│    │  │モード構造体│
  └────┘││  ├──────┤    │  ├──────┤
              ││  │    next    │──┘  │    next  ─┼─これ以上無いとき
              ││  └──────┘        └──────┘  はNULL。
              ││    構造体２
              │└→┌─────────┐
 F2が渡され ─┼─→│multiSequenceFunc │
 た時uiContext│    ├─────────┤              キ−テ−ブル２
 が指している │    │   キーテーブル   │→┌──┬────────────┐
 構造体       │    ├─────────┤  │(F2)│IROHA_FN_UseOtherKeymap │
              │    │      フラグ      │  ├──┴────────────┤
              │    ├─────────┤  │               -1             │
              │    │   関数テーブル   │  └───────────────┘
              │    └─────────┘
              └─→┌──────┐
                    │キーテーブル│
                    ├──────┤
                    │  キー(F2)  │
                    ├──────┤
                ┌─│モード構造体│
                │  ├──────┤
                │  │    next    │
                │  └──────┘
                │    構造体３
                └→┌─────────┐
 Xferが渡された時 →│multiSequenceFunc │
 uiContext が指し   ├─────────┤          キ−テ−ブル３
 ている構造体       │   キーテーブル   │→┌──┬────────────┐
                    ├─────────┤  │(F2)│IROHA_FN_DoFuncSequence │
                    │      フラグ      │  ├──┴────────────┤
                    ├─────────┤  │               -1             │
                    │   関数テーブル   │  └───────────────┘
                    └─────────┘

  <1> ２．１の(1)〜(3)までの処理を同様に行う。

  <2> アプリケ−ションから渡されたキ−により以下の処理を行う。 ここで
     は最後のキ−がアプリケ−ションから渡されるまではモ−ド構造体を付
     け替えるだけである。

     ◎１番目のキ−(F1)に対する処理

     ａ．モ−ド構造体中のsimplefuncを実行する。

     ｂ．simplefuncではキ−テ−ブルを参照してキ−の機能を得、さらにそ
       のキ−の機能で関数テ−ブルを参照して処理関数へのポインタを得る。

       ある機能に対し複数のキ−を割り当てるカスタマイズをした場合、そ
       の先頭の(F1)に対する機能はIROHA_FN_UseOtherKeymap である。

       また、そのキ−の機能で関数テ−ブルを参照すると関数
       UseOtherKeymapへのポインタが得られる。

     ｃ．関数UseOtherKeymapでは、キ−テ−ブルのアドレスとキ−によりハッ
       シュキ−を作成して、ハッシュテ−ブルから複数キ−シ−ケンス用の
       モ−ド構造体（前ペ−ジモ−ド構造体２）を得て、uiContext 中のカ
       レントモ−ド構造体へのポインタを付け替える。


     ◎２番目以降のキ−(F2,Xfer) に対する処理

     ａ．モ−ド構造体のmultiSequenceFunc を実行する。


        複数キ−シ−ケンスを処理する場合、simplefuncの代わりに
        multiSequenceFunc が実行される。

     ｂ．multiSequenceFunc では、キ−テ−ブル中の機能を取り出す。

        その内容がIROHA_FN_UseOtherKeymap であれば、さらにキ−シ−ケン
        スが続いているので、現在指しているキ−テ−ブルのアドレスとキ−
        によりハッシュキ−を作成し、ハッシュテ−ブルから複数キ−シ−ケ
        ンス用のモ−ド構造体（前ペ−ジモ−ド構造体３）を得て、
        uicontext 中のカレントモ−ド構造体へのポインタを付け替える。

        また、その内容がIROHA_FN_FuncSequence であれば関数_
        DoFuncSequence を呼び出し

        て前述の複数機能処理を行う。

  <3> ２．１(6)〜(9)を行う。

  ※モ−ド構造体の関数テ−ブルのアドレスは、モ−ド構造体が得られた時点
  で設定される。
