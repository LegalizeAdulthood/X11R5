４．カスタマイズ指定とライブラリの関係

  カスタマイズファイルは、JrKanjiString又はXLookupKanjiStringが最初に
  呼び出された時、あるいはJrKanjiControl又はXKanjiControlで
  KC_INITIALIZEがrequestされたときに読み込まれる。

  カスタマイズファイルは、パラメタの字句解析が行われ(lex.l）、正当なパ
  ラメタであれば、指定されている値を設定する処理が行われたり、関数が呼
  ばれたりする。(gram.y)

  以下では、機能の使用有無をカスタマイズした場合とキ−の割り当てをカス
  タマイズした場合について述べる。

  (1)機能の使用有無のカスタマイズ

    例えば、

        cursorWrap        on

    とカスタマイズされているとint型のグロ−バルな変数CursorWrapに1が設
    定される。変数CursorWrapはこの機能を制御する関数内で検査される。

  (2)キ−の割り当てをカスタマイズ

    例えば、

        yomi {
            hiragana                                 ^n   ─────  Ａ
            hiragana,henkan,kouhoIchiran             Xfer ─────  Ｂ
            hiragana,henkan                          F1,F2,Xfer ──  Ｃ
        }

    とカスタマイズされていると関数chgkeyfuncが呼び出され、Ａでは１つの
    キ−(^n)による１つの機能(hiragana)の実行の為の設定が行われる。Ｂで
    は１つのキ−(Xfer)による複数機能(hiragana,henkan,kouhoIchiran)実行
    の為の設定が行われる。Ｃでは複数のキ−(F1,F2,Xfer)によるある機能
    (hiragana,henkan実行の為の設定が行われる。以下にＡ，Ｂ，Ｃの例につ
    いて述べる。

    <1>キ−をカスタマイズした場合キ−テ−ブルにキ−の機能を登録する。
    ただし、モ−ド構造体中のフラグを検査してキ−テ−ブルが共有されてい
    る場合は、直接登録することが出来ないので別の領域を割り当ててそれを
    使用する。カスタマイズでモ−ド指定をしていない場合は、全てのキ−テ
    −ブルに直接登録する。

                     キーテーブル(オリジナル)
                  ┌→┌─────┐←┐
                  │  │          │  │
    モード構造体  │  │          │  │                    別の構造体
  ┌──────┐│  │          │  │                  ┌──────┐
  │ simplefunc ││  │          │  │同じキーテーブルを│ simplefunc │
  ├──────┤│  │          │  │参照している      ├──────┤
  │キーテーブル│┐  └─────┘  └─────────│キーテーブル│
  ├──────┤│      │                              ├──────┤
  │   フラグ   ││      ↓コピーする                    │   フラグ   │
  ├──────┤│                                      ├──────┤
  │関数テーブル││   キーテーブル                       │関数テーブル│
  └──────┘└→┌─────┐                      └──────┘
      ポインタ付け替え│          │
                      │          │
                      │          │
                      │          │
                      │          │
                      └─────┘


    <2>キ−テ−ブル中の該当するキ−に機能の登録をする。

         キーテーブル
        ┌─────┐
        │    :     │
        │          │
        ├─────┤
        │   ^n   ─┼──  IROHA_FN_Hiragana を登録する。─────  Ａ
        ├─────┤
        │  Xfer  ─┼──  IROHA_FN_FuncSequence を登録する。───  Ｂ
        ├─────┤
        │   F1   ─┼──  IROHA_FN_UseOtherKeymap を登録する。──  Ｃ
        └─────┘

        Ａの場合はそのまま機能を登録して終了する。
        Ｂの場合はIROHA_FN_FuncSequenceを登録する。
        Ｃの場合はIROHA_FN_UseOtherKeymapを登録する。

    <3>Ｂ、Ｃはさらに複数機能シ−ケンス、複数キ−シ−ケンスをそれぞれ
       登録する。

     ａ．複数機能シ−ケンス

       複数機能シ−ケンスをハッシュテ−ブルに登録する。このときのハッ
       シュキ−は、キ−テ−ブルのアドレスとキ−である。


                               同じハッシュキ−
                             ┌─────────┐
 ハッシュテーブル            │                  │
  ┌─────┐┌→┌──────┐  ┌→┌───────┐
  │          │┘  │キーテーブル│  │  │ キーテーブル │
  ├─────┤    ├──────┤  │  ├───────┤
  │          │    │    キー    │  │  │     キー     │
  ├─────┤    ├──────┤  │  ├───────┤
  │    :     │┌─│複数機能 Seq│  │┌│ 複数機能 Seq │
  │    :     ││  ├──────┤  ││├───────┤
  └─────┘│  │    next    │─┘││     next     ┼これ以上無いとき
                │  └──────┘    │└───────┘はNULL。
                │                      │
                │複数機能シーケンス    │               複数機能シーケンス
                └→┌──┐            └───────────→┌──┐
                    │ 39 │hiragana     → IROHA_FN_Hiragana = 39│    │
                    ├──┤                                      │    │
                    │ 24 │henkan       → IROHA_FN_Henkan   = 24│    │
                    ├──┤                                      │    │
                    │ 32 │kouhoIchiran → IROHA_FN_kouhoIchiran │    │
                    ├──┤                                  = 32│    │
                    │NULL│なので、左図のようになる。            │    │
                    └──┘                                      └──┘

  ──で囲んだ部分がカスタマイズによって登録されたもの


     ｂ．複数キ−シ−ケンス

       複数キ−シ−ケンスをハッシュテ−ブルに登録する。このときのハッ
       シュキ−はキ−テ−ブルのアドレスとキ−である。また、複数キ−シ
       −ケンスを実行するときに使用するモ−ド構造体及びキ−テ−ブルも
       作成する。

                               同じハッシュキ−
                            ┌─────────┐
ハッシュテーブル            │                  │
┌─────┐──→┌──────┐  ┌→┌──────┐
├─────┤┐    │キーテーブル│  │  │キーテーブル│
├─────┤│    ├──────┤  │  ├──────┤
├─────┤│    │  キー(F1)  │  │  │    キー    │
│    :     ││    ├──────┤  │  ├──────┤
│    :     ││┌─│モード構造体│  │  │モード構造体│
└─────┘││  ├──────┤  │  ├──────┤
              ││  │    next    │─┘  │    next  ─┼─ これ以上無いとき
              ││  └──────┘      └──────┘   はNULL。
              ││    構造体１
              │└→┌─────────┐
              │    │multiSequenceFunc │
              │    ├─────────┤              キ−テ−ブル１
              │    │   キーテーブル   │→┌──┬────────────┐
              │    ├─────────┤  │(F2)│IROHA_FN_UseOtherKeymap │
              │    │      フラグ      │  ├──┴────────────┤
              │    ├─────────┤  │              -1              │
              │    │   関数テーブル   │  └───────────────┘
              │    └─────────┘
              └─→┌──────┐
                    │キーテーブル│
                    ├──────┤
                    │  キー(F2)  │
                    ├──────┤
              ┌──│モード構造体│
              │    ├──────┤
              │    │    next    │
              │    └──────┘
              │    構造体２
              └→┌─────────┐
                  │multiSequenceFunc │
                  ├─────────┤              キ−テ−ブル２
                  │   キーテーブル   │→┌───┬────────────┐
                  ├─────────┤  │(Xfer)│IROHA_FN_DoFuncSequence │
                  │      フラグ      │  ├───┴────────────┤
                  ├─────────┤  │               -1               │
                  │   関数テーブル   │  └────────────────┘
                  └─────────┘

       Ｃのように複数キ−による複数機能の登録の場合は指定した複数キ−
       シ−ケンスを登録した後で前述の複数機能シ−ケンス登録を行う。

       また、

         yomi {
             hiragana,henkan    F1,F2,Xfer
             zenkaku            F1,F2,^n       途中まで同じキ−シ−ケンス
         }

       とカスタマイズされているとキ−テ−ブル２は次のようになる。


            ┌─────┬────────────┐
            │キー(Xfer)│IROHA_FN_DoFuncSequence │
            ├─────┼────────────┤
            │ キー(^n) │IROHA_FN_Zenkaku        │
            ├─────┴────────────┤
            │                -1                  │
            └──────────────────┘
 
       ──で囲んだ部分がカスタマイズによって登録されたもの
