$Header: sj3def,v 1.1 91/10/01 18:10:43 nao Locked $

[ このドキュメントは kinput2 で変換システムに sj3 を使用する時に使われる   ]
[ 変換オブジェクト Sj3Object(クラス名は Sj3)について、および Sj3Object が  ]
[ 使用しているローマ字かな変換、その他各操作キーのカスタマイズの方法につい ]
[ て記述しています。                                                       ]

*** 入力文字変換の設定 ***
 
    ここでは kinput2 の変換オブジェクトの一つ Sj3Object が変換に使用するキー
    のバインディングやローマ字かな変換、かなローマ字変換、半角/全角カタカナ
    変換、ひらがな/かたかな変換などをカスタマイズするのに必要な
    変換定義ファイルの書き方について説明します。ここに書かれた
    文章だけではわかりにくいので、できればデフォルトの定義ファイル 
    (/usr/lib/X11/sj3def/{sjrc,sjrk,sjhk,sjzh} を見ながら読むとよいと
    思います。また、最後にちょっとしたカスタマイズの例を紹介してあります。

** sj3Object の特徴

    1. sj3Object ではかな漢字変換サーバに sj3serv (X11R5 の contribute に
        含まれています) を使用します。

    2. 通常入力モードでは 全角ひらがな、全角カタカナ、半角カタカナ、
        半角アルファベット、全角アルファベットの５つの文字種での
        入力モードがあり、各文字種間での変換が可能になっています。

    3. コード入力モードでは Shift-JIS、日本語EUC、JIS、句点コード
        での入力が可能になっています。

    4. ローマ字入力時のアルファベットの全角への変換をするか、文字消去時に
        ローマ字での入力時の子音(たとえば "か" の "k")を再表示するか、
        文節縮小、拡大時にその部分を再度かな漢字変換するか、文節長学習機能を
        使用するか、等の変換システムによって異なる動作をユーザが
        選択できるような機能を備えています。

    5. 文字/文節消去、記号選択開始、モード変換等の変換動作をコントロール
        するキー(以降コントロール・イベント・キーと呼びます。)
        を各モディファイア・キー、各変換モード(後述)に独立して
        カスタマイズすることが可能になっています。

    6. 変換サーバとのコネクションがなんらかの原因で切断されたとき(sj3serv の
        動いているマシンを落としたときなど)に、kinput2 を再起動することなく
        別の変換サーバと接続できる reconnect 機能、second 変換サーバ
        機能を備えています。

    7. リソースファイル sjrc の記述方法は、モード表示文字列(.guide.*)、
        初期動作モード(.InitialMode)、ローマ字かな変換時のベル(.rkerrbell)、
        キーバインド(.key)、モード切替え時のフラッシュ動作
        (.FlushAfterConversion)等多くの機能で sjx/sj2/sj3 の設定ファイル
        sjrc との互換性を保持しています。

    8. 半角カタカナ<-->全角カタカナ、半角アルファベット<-->全角アルファベット
        とうの半角/全角の変換規則（特に記号等)を sjzk ファイルでカスタマイズ
        可能です。また、ひらがな<->全角カタカナの変換規則(「ヴ」など)
        も sjhk ファイルでカスタマイズ可能です。

    9. ローマ字かな変換も sjrk ファイルでカスタマイズ可能です。sjx と
        異なり、大文字/小文字アルファベットを区別します。(CcWnn のように
        小文字アルファベット(lower)で入力時はひらがなに
        大文字アルファベット(upper)で入力したときはカタカナに、
        というように区別することができます。

    10.現在のところ残念ながら辞書登録機能は備えていません。
        辞書登録には sj3dic (X11R5 の contribute に含まれています)を使用して
        ください。時期バージョンではサポートされるかもしれません。

** sj3Object の変換モード

    kinput2 の場合モードという概念には３種類考えられます。
    １つは入力する文字種によって区別する方法で、sj3Object では
    「ひらがなモード」「全角カタカナモード」「半角カタカナモード」等の
    区別ができます。sj3Object ではこれを「文字種モード」と呼ぶことにします。
    文字種モードには以下の５つのモードがあります。

    1.  ひらがなモード
    2.  全角カタカナモード
    3.  半角カタカナモード
    4.  全角アルファベットモード
    5.  半角アルファベットモード

    もうひとつのモードの概念は変換中の文字列の状態によって区別する方法で、
    sj3Object では 文字入力中の状態、各文字種や漢字への変換中、
    文節長変更中の状態、候補選択中や記号選択中の状態、の３つの状態を
    それぞれ区別することができます。sj3Object ではこれを「変換モード」
    と呼ぶことにします。変換モードには以下の３つのモードがあります。

    1.  InputMode   文字入力中の状態
    2.  UnConvMode  各文字種や漢字への変換中、文節長変更中の状態
    3.  ConvMode    候補選択中や記号選択中の状態

    それぞれ  InputMode は CcWnn での[未変換]、UnConvMode は CcWnn
    での[変換済]、 ConvMode は [候補選択] と [記号入力] に対応すると
    考えれば良いでしょう。

    ３つ目のモードの概念は入力方法によって区別する方法で、
    sj3Object ではローマ字やカタカナキーなど文字キーによる入力と
    数字、つまりコードによる入力を区別することができます。
    sj3Object ではこれを「入力モード」と呼ぶことにします。
    入力モードには以下の２つのモードがあります。

    1.  通常入力モード      各種文字キーによる入力
    2.  コード入力モード    コードによる入力

** 各カスタマイズ用ファイルの場所とフォーマット

    sj3Object のカスタマイズ用には以下の５種類のファイルが
    用意されています。

    1.  ローマ字かな変換カスタマイズ用
    2.  ひらがなカタカナ変換カスタマイズ用
    3.  半角全角変換カスタマイズ用
    4.  記号選択字表示記号のカスタマイズ用
    5.  変換時の挙動、コントロール・イベント・キーのキー・バインド
        カスタマイズ用

    以下それぞれのカスタマイズ用ファイルについて説明します。
    各ファイルに多バイト文字を記述するエントリがある場合、
    locale の LC_CTYPE が "ja_JP.SJIS" の場合 Shift-JIS
    として、それ以外のときは EUC として読み込みます。
    LC_CTYPE が "ja_JP.SJIS" でなく Shift-JIS として読み込みたいときは
    include/sj3def.h で FORCE_SJIS を define してコンパイル
    すれば必ず  Shift-JIS として読み込みます。

    1.  ローマ字かな変換カスタマイズ用

        このファイルは以下の優先順位ででサーチされ、
        初めての変換開始時に読み込まれます。

        [1] オプション -rkfile に続くファイル名
        [2] リソースファイル(リソースファイルのサーチ順は Xtoolkit の
            マニュアルを見てください)で *Sj3.rkfile に指定されるファイル
        [3] 環境変数 SJRK に指定されるファイル
        [4] ホームディレクトリの直下の .sjrk という名称のファイル
        [5] /usr/lib/X11/sj3def の下の sjrk という名称のファイル

        ただし、リソースファイルやオプションに指定した場合は、
        指定されたファイルが存在しないとエラーで終了します。
        このファイルのフォーマットは各行以下のようになります。

        [in_romaji]    [out_kana]  [out_romaji]

        各行には３つのエントリを記述します。各エントリの区切りは
        タブコードか space になります。
        それぞれ１番目のエントリには変換元のローマ字(ASCII キャラクタセット
        のうち 0x00〜0x1f と 0x7f を除いた文字が指定できます)列を指定します。
        space(0x20)、'¥'(0x5c)、'#'(0x23) を含む場合は '¥'
        でエスケープする必要があります。
        ２番目のエントリには変換時の全角文字列を指定します。
        ３番目のエントリには変換後に変換バッファに残し、次の文字の
        変換に使用したい文字列を指定します。指定できる文字は
        １番目のエントリと同様です。また、３番目のエントリは省略可能です。

        また、各行に '#' が含まれる場合、そこからあとはコメントとみなされます。
    
    2.  ひらがなカタカナ変換カスタマイズ用

        このファイルは以下の優先順位ででサーチされ、
        初めての変換開始時に読み込まれます。

        [1] オプション -hkfile に続くファイル名
        [2] リソースファイル(リソースファイルのサーチ順は Xtoolkit の
            マニュアルを見てください)で *Sj3.hkfile に指定されるファイル
        [3] 環境変数 SJHK に指定されるファイル
        [4] ホームディレクトリの直下の .sjhk という名称のファイル
        [5] /usr/lib/X11/sj3def の下の sjhk という名称のファイル

        ただし、リソースファイルやオプションに指定した場合は、
        指定されたファイルが存在しないとエラーで終了します。
        このファイルのフォーマットは各行以下のようになります。

        [zhira]    [zkata]     [hkata]

        各行には３つのエントリを記述します。各エントリの区切りは
        タブコードか space になります。
        それぞれのエントリには対応する全角ひらがなを一文字、
        全角カタカナを一文字、半角カタカナ(２文字以内)を記述します。
        この変換対応規則は各文字種入力モードでの入力や文字種モードの
        変換時に使用されます。

        また、各行に '#' が含まれる場合、そこからあとはコメントとみなされます。

    3.  半角全角変換カスタマイズ用
    
        このファイルは以下の優先順位ででサーチされ、
        初めての変換開始時に読み込まれます。

        [1] オプション -zhfile に続くファイル名
        [2] リソースファイル(リソースファイルのサーチ順は Xtoolkit の
            マニュアルを見てください)で *Sj3.zhfile に指定されるファイル
        [3] 環境変数 SJZH に指定されるファイル
        [4] ホームディレクトリの直下の .sjzh という名称のファイル
        [5] /usr/lib/X11/sj3def の下の sjzh という名称のファイル

        ただし、リソースファイルやオプションに指定した場合は、
        指定されたファイルが存在しないとエラーで終了します。
        このファイルのフォーマットは各行以下のようになります。

        [halpha]   [zalpha]    [zhira/zkana]   [hkana]

        各行には４つのエントリを記述します。各エントリの区切りは
        タブコードか space になります。
        それぞれのエントリには対応する半角アルファベットを一文字、
        全角半角アルファベットを一文字、全角かなを一文字、半角カタカナ
        を一文字、記述します。それぞれは半角/全角が一致していれば
        重なってもかまいません。半角文字を記述するエントリで
        space(0x20)、'¥'(0x5c)、'#'(0x23) を含む場合は
        '¥' でエスケープする必要があります。
        この変換対応規則は各文字種入力モードでの入力や文字種モードの
        変換時に使用されます。

        また、各行に '#' が含まれる場合、そこからあとはコメントとみなされます。

    4.  記号選択字表示記号のカスタマイズ用

        このファイルは以下の優先順位ででサーチされ、
        初めての変換開始時に読み込まれます。

        [1] オプション -sbfile に続くファイル名
        [2] リソースファイル(リソースファイルのサーチ順は Xtoolkit の
            マニュアルを見てください)で *Sj3.sbfile に指定されるファイル
        [3] 環境変数 SJSB に指定されるファイル
        [4] ホームディレクトリの直下の .sjsb という名称のファイル
        [5] /usr/lib/X11/sj3def の下の sjsb という名称のファイル

        ただし、リソースファイルやオプションに指定した場合は、
        指定されたファイルが存在しないとエラーで終了します。
        このファイルのフォーマットは各行以下のようになります。

        [data]

        各行にはただ１つのエントリを記述します。
        このエントリには記号選択時に表示したい全角文字列を書きます。
        各行に '#' が含まれる場合、そこからあとはコメントとみなされます。

    5.  変換時の挙動、コントロール・イベント・キーのキー・バインド
        カスタマイズ用

        このファイルは以下の優先順位ででサーチされ、
        初めての変換開始時に読み込まれます。

        [1] オプション -rcfile に続くファイル名
        [2] リソースファイル(リソースファイルのサーチ順は Xtoolkit の
            マニュアルを見てください)で *Sj3.rcfile に指定されるファイル
        [3] 環境変数 SJRC に指定されるファイル
        [4] ホームディレクトリの直下の .sjrc という名称のファイル
        [5] /usr/lib/X11/sj3def の下の sjrc という名称のファイル

        ただし、リソースファイルやオプションに指定した場合は、
        指定されたファイルが存在しないとエラーで終了します。
        このファイルのフォーマットは各行以下のようになります。

        [key0].[key1]   [value0][./white][value1][./white][value2] …………

        各行にはそれぞれ keyword のエントリをそれに対応する
        value のエントリを記述します。行頭からみて最初の
        tab か space が keyword のエントリと value のエントリ
        の境目になります。keyword のエントリ内にはそれぞれ
        「.」(0x2e)で区切って複数の keyword を指定できます
        が、現在のところその数は２つまでに制限されています。
        value のエントリはそれぞれ「.」(0x2e)や space、tab で
        区切られます。その数は１０個まで指定できます。
        
        value? のエントリには全角文字も記述できますが、
        keyword のエントリはすべてコントロールコードを除く
        ASCII 文字で記述されている必要があります。
        各 keyword とそこに指定できる value については
        後述します。
        
** コントロール・イベント・キーのキー・バインドカスタマイズ方法
    
    Sj3Object の各変換操作、文字列/文節操作に対応するキー・バインド
    は sjrc ファイル(前項の 5. のファイル)で行います。
    format は以下のように ３つのエントリ(keyword + 2 value)
    からなります。

    .key.[ファンクション名]     [変換 Mode/Modifier]    [KeySym]

    1. [ファンクション名] に指定できるもの

        ファンクション名にはそのキーと変換モードの組合せにおいて
        呼び出される Sj3Object のファンクション(操作)を指定します。
        現在のところ指定できるファンクションには以下のものがあります。
        それぞれ、対応するモードで動作が異なるものがあるので注意が
        必要です。
        なるべく多くのファンクション名は sj2/sj3/sjx の sjrc と
        互換性を保つようにしました。

------------------------------------------------------------------------------
henkan  [InputMode] 入力バッファの文字列を一括変換し、UnConvMode にします
        [UnConvMode/ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
muhen   [InputMode] 無視します
        [UnConvMode/ConvMode] かな漢字変換前の状態に戻し、InputMode にします
------------------------------------------------------------------------------
kettei  [InputMode/UnConvMode] 文を確定します
        [ConvMode] 選択中(反転している)の文字列を選択して文を確定します
------------------------------------------------------------------------------
flush       現在のところ "kettei" と同じです
------------------------------------------------------------------------------
return  [InputMode/UnConvMode] 文を確定し、リターンします
            変換中の文字列がない場合は Carriage-Return と同じです
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
end     [InputMode/UnConvMode] 文を確定して変換を終了います
        [ConvMode]  選択中(反転している)の文字列を選択して
            確定後変換を終了します
------------------------------------------------------------------------------
select  [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 候補選択中のときは選択中(反転している)の文字列を選択して
                UnConvMode に戻ります 記号選択中の時は選択中の文字列を
                選択して InputMode に戻ります
------------------------------------------------------------------------------
symbol  [InputMode] 記号選択を開始します
        [UnConvMode] 変換バッファの内容を確定し、記号選択を開始します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
halpha  [InputMode] 文字種モードを半角アルファベットにします
        [UnConvMode] カレント(反転している)文節を半角アルファベットに変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
zalpha  [InputMode] 文字種モードを全角アルファベットにします
        [UnConvMode] カレント(反転している)文節を全角アルファベットに変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
hkata   [InputMode] 文字種モードを半角カタカナにします
        [UnConvMode] カレント(反転している)文節を半角カタカナに変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
zkata   [InputMode] 文字種モードを全角カタカナにします
        [UnConvMode] カレント(反転している)文節を全角カタカナに変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
hira    [InputMode] 文字種モードをひらがなにします
        [UnConvMode] カレント(反転している)文節をひらがなに変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
code    [InputMode] 通常入力モードの時は初期コード入力のモード(後述)にし、
                コード入力モードの時は Shift-JIS -> EUC -> JIS -> 区点コード
                の順に Rotate します
        [UnConvMode/ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
mode    [InputMode] コード入力モードの時は初期文字種モード(後述)にし、
                通常入力モードの時は ひらがな -> 全角カタカナ -> 
                半角カタカナ -> 半角アルファベット -> 全角アルファベット 
                の順に文字種モードを Rotate します
        [UnConvMode] カレント(反転している)文節を ひらがな -> 全角カタカナ
                -> 半角カタカナ -> 半角アルファベット -> 全角アルファベット
                の順に文字種変換します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
toggle  [UnConvMode] カレント文節の文字種を sjrc の muhenkaninedit で
                設定された文字種との間で toggle します
        [InputMode/ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
right   [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中の候補(記号)を日１つ右のものに移します
------------------------------------------------------------------------------
left    [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中の候補(記号)を日１つ左のものに移します
------------------------------------------------------------------------------
up      [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中の候補(記号)を日１つ上のものに移します
------------------------------------------------------------------------------
down    [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中の候補(記号)を日１つ下のものに移します
------------------------------------------------------------------------------
nextp   [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中次ページに移ります
------------------------------------------------------------------------------
prevp   [InputMode/UnConvMode] エラーであることを明示するためベルを鳴らします
        [ConvMode] 現在選択中前ページに移ります
------------------------------------------------------------------------------
backward[InputMode/UnConvMode] カレント(反転している)文節を１つ前に移します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
forward [InputMode/UnConvMode] カレント(反転している)文節を１つ後に移します
        [ConvMode] エラーであることを明示するためベルを鳴らします
------------------------------------------------------------------------------
kakuchou[InputMode/ConvMode] エラーであることを明示するためベルを鳴らします
        [UnConvMode] カレント(反転している)文節を１文字伸ばします
------------------------------------------------------------------------------
syoukyo [InputMode/ConvMode] エラーであることを明示するためベルを鳴らします
        [UnConvMode] カレント(反転している)文節を１文字縮小します
------------------------------------------------------------------------------
cancel  [InputMode/UnConvMode/ConvMode] 現在変換中の文字列をキャンセルします
------------------------------------------------------------------------------
saihenkan[InputMode/ConvMode] エラーであることを明示するためベルを鳴らします
        [UnConvMode] カレント(反転している)文節の文字種がひらがなでない場合
                文字種をひらがなにします 文字種がひらがなの場合、
                ConvMode にして候補選択を開始します
------------------------------------------------------------------------------
syoukyo [InputMode] 一文字消去します
        [UnConvMode] カレント(反転している)文節を消去します
        [ConvMode] 候補選択を終了しカレント(反転している)文節を消去します
------------------------------------------------------------------------------
reconnect[InputMode/UnConvMode/ConvMode] 現在変換中の文字列をキャンセルし、
                first server か second server かどちらかに再接続可能ならば
                再接続し、InputMode にします
                再接続に失敗した場合 kinput2 を終了します
------------------------------------------------------------------------------

    2. [変換 Mode/Modifier]/[KeySym] エントリの指定のしかた

        このエントリには１番目のエントリのファンクションを
        呼び出すときの変換モードとキー操作を指定します。
        [変換 Mode/Modifier] は以下の例のようにそれぞれ '|' で
        マスクすることができます

        例 (Control Key と Shift Key が同時に押され変換モードが
            InputMode のときに KeySym 名が 'd' のキーが押されると
            ファンクション "shoukyo" の機能を呼び出す

.key.shoukyo    c|s|i       d

        [変換 Mode/Modifier] に '|' で区切って
        指定できるものとその意味は以下のとおりです

        n   モディファイア/変換モードのマスクなし
        s   Shift-Key が同時に押されたとき
        c   Control-Key が同時に押されたとき
        m   Mod1-Key (Meta-Key) が同時に押されたとき
        l   Lock-Key が同時に押されたとき
        i   変換モードが InputMode の時
        u   変換モードが UnConvMode の時
        v   変換モードが ConvMode の時
        o   変換モードが UnConvMode か ConvMode の時 ('u|v' と同じ)
        f   変換モードが InputMode か UnConvMode の時 ('i|u' と同じ)
        a   すべての変換モードの時 ('u|v|i' と同じ)

        ただし、[変換 Mode/Modifier] のエントリが、n、s、c、m、l、
        の組合せだけで書かれているときはその操作はすべての変換モードの時
        に有効になります( 'a' が同時に指定されたのと同じになる)

        [KeySym] のエントリには KeySym 名を指定します。
         KeySym 名は XKeysymToString(3X11) のリターン値、
        xmodmap -pk の表示等から得ることができます


    3. プログラム内部でのデフォルトのキー・バインディング

        デフォルトのキー・バインディングは以下のようになっており
        sjrc に上記のようなフォーマットで記述することによって
        異なるキーバインディングを追加できます
        KeySym と Modifier キーの組合せが同じで
        同一の変換モードで有効になるように指定した
        バインディングあった場合はあとに記述された
        ものが有効になります。

        デフォルトのキー・バインディングを sjrc に指定する形式で
        示すと以下のようになります。

.key.henkan     i       Select
.key.muhen      u       Cancel
.key.kettei     f       Execute
.key.kettei     f       KP_Enter
.key.flush      f       Execute
.key.flush      f       KP_Enter
.key.flush      f       Escape
.key.return     f       Return
.key.select     v       Return
.key.select     v       Execute
.key.select     v       Escape
.key.halpha     f       F6
.key.zalpha     f       F7
.key.hkata      f       F8
.key.zkata      f       F9
.key.hira       f       F10
.key.symbol     i       F4
.key.code       i       F5
.key.mode       f       Tab
.key.toggle     u|c     Cancel
.key.right      v       Right
.key.left       v       Left
.key.up         v       Up
.key.down       v       Down
.key.prevp      v       Cancel
.key.nextp      v       Select
.key.backward   u       Left
.key.forward    u       Right
.key.kakuchou   u       Up
.key.syukusyou  u       Down
.key.cancel     a|s     Cancel
.key.saihenkan  u       Select
.key.syoukyo    a       BackSpace
.key.end        a|s     Kanji
.key.reconnect  a|m|s   Kanji

** モード表示文字列のカスタマイズ方法
    
    Sj3Object のモード表示文字列のカスタマイズ
    は sjrc ファイルで行います。
    format は以下のように １つのエントリ(keyword + 1 value)
    からなります。

    .guide.[モード名]       [モード表示文字列]

    1. [モード名] に指定できるもの

        モード名には対応するモード表示文字列が表示されるときの
        モードを指定します
        指定できるものには以下のものがあります

------------------------------------------------------------------------------
hira    ひらがなモードのときに表示する文字列を指定時に指定します
------------------------------------------------------------------------------
zkata   全角カタカナモードのときに表示する文字列を指定時に指定します
------------------------------------------------------------------------------
hkata   半角カタカナモードのときに表示する文字列を指定時に指定します
------------------------------------------------------------------------------
zalpha  全角アルファベットモードのときに表示する文字列を指定時に指定します
------------------------------------------------------------------------------
halpha  半角アルファベットモードのときに表示する文字列を指定時に指定します
------------------------------------------------------------------------------
sjis    コード入力モードで Shift-JIS 入力の時に表示する文字列を
        指定時に指定します
------------------------------------------------------------------------------
jis     コード入力モードで JIS 入力の時に表示する文字列を
        指定時に指定します
------------------------------------------------------------------------------
euc     コード入力モードで EUC 入力の時に表示する文字列を
        指定時に指定します
------------------------------------------------------------------------------
kuten   コード入力モードで区点コード入力の時に表示する文字列を
        指定時に指定します
------------------------------------------------------------------------------
    
    2. [モード表示文字列] に指定できるもの

        [モード表示文字列] には全角文字を指定できますが、
        指定できるコードについては前々項の記述をご覧ください。

    3. デフォルトのモード表示文字列の指定

        デフォルトの表示文字列は以下のようになっています。
        
.guide.hira     かな
.guide.zkata    全カナ
.guide.hkata    半カナ
.guide.zalpha   ABC
.guide.halpha   ＡＢＣ
.guide.sjis     Shift-JIS
.guide.jis      ＪＩＳ
.guide.euc      ＥＵＣ
.guide.kuten    区点

** その他の各種ユーザ・インターフェースのカスタマイズ方法

    Sj3Object にはその他、様々なユーザインターフェースを
    選べるように sjrc でカスタマイズすることができます。
    1.〜9. は sj2/sjx/sj3 と互換のリソースとして
    用意しています。
    
    1. 初期動作モード

[format]
.InitialMode        unbuff.[モード名].direct

        kinput2(Sj3Object) の変換機能を初めて呼び出したときに
        どのモードで動作するかを [モード名] に指定します。
        指定できる形式は前項の < 1. [モード名] に指定できるもの>
        と同じです。sj2/sj3/sjx との互換性のため、value は 「unbuff.」
        と「.direct」で囲む必要があります。
        デフォルトは "hira" です。

    2. code 入力時のデフォルトコード

[format]
.DefaultCode        [コード名]

        ファンクション code の機能を呼び出したときの最初の
        コードを指定します。指定できるコードは "sjis"、"jis"、"euc"、"kuten"、
        です。デフォルトは "sjis" です。

    3. ファンクション muhen を呼び出したときの文字種モード
    
[format]
.MuhenkanMode       [モード名]

        ファンクション muhen を呼び出したときに InputMode でどの
        文字種モードにするか指定します。指定できるモードは
        個の項の 1. 初期動作モード と同じです。デフォルトは "hira" です。

    4. 入力モードのトグル動作を行うかどうかの指定

[format]
.MuhenkanToggle     [on/off]

        ファンクション toggle を呼び出したときに toggle 動作を
        を行うかどうかの指定を on/off で行います。
        デフォルトは "on" です。

    5. 入力モードのトグル動作時にどのモードにトグルするかの指定

[format]
.MuhenkanInEdit     [モード名]

        ファンクション toggle を呼び出したときにどの
        文字種モードに toggle するか指定します。指定できるモードは
        個の項の 1. 初期動作モード と同じです。デフォルトは "hira" です。


    6. ローマ字かな変換出来ないときベルを鳴らすかの指定

[format]
.rkerrbell          [on/off]

        ローマ字かな変換に失敗したときにベルを鳴らすかどうかを
        を on/off で指定します。デフォルトは "off" です。

    7. モード切り替えキーを押すと決定するか

[format]
.FlushAfterConversion       [on/off]

        ファンクション hira/zkata/hkata/zalpha/halpha/mode を
        呼び出したときに変換中の文字列を確定するかを
        on/off で指定します。デフォルトは "off" です。
        
    8. 文節長学習機能を使用するか

[format]
.bstudy                     [on/off]

        文節長学習機能を使用するかどうかを on/off で指定します。
        デフォルトは "off" です。

    9. first sj3serv のホスト名指定

[format]
.server                     [ホスト名]

        first 変換サーバとして接続するサーバのホスト名を指定します。

    10. second sj3serv のホスト名指定

[format]
.server2                    [ホスト名]

        second 変換サーバとして接続するサーバのホスト名を指定します。

    11. アルファベットを大文字に変換するか

[format]
.AlphabetConversion         [on/off]

        ローマ字かな変換時のアルファベットを全角に変換するか
        を on/off で指定します。デフォルトは "off" です。
        sjx/sj3 ではデフォルトで全角に変換します。

    12. 文字消去時の動作（変換途中のローマ字を表示するか）

[format]
.BackDisplay                [on/off]

        InputMode での文字消去時にひとつ前のローマ字かな変換済の
        文字の変換途中のアルファベットを表示するかどうか
        を on/off で指定します。デフォルトは "on" です。
        "on" のとき NEWS-OS の sj3 コマンドの動作と同じになります。
        sjx では変換バッファにあるすべての文字について消去時に
        変換途中のアルファベットを表示しますが、この方法は
        遅くなるので今回はサポートを見送りました。

    13. 一括変換時の注目するセグメントの位置

[format]
.BeginConversionLast                [on/off]

        ファンクション henkan の機能を呼び出して一括変換を
        行ったときに最初にどの文節をカレント(反転した)文節
        にするかを指定します。on の時は最後の文節を off の時は
        最初の文節をカレント(反転した)文節にします。
        デフォルトは "off" です。

    14. 文節拡張時に拡張部分のモード変換を行なうか

[format]
.ExpandModeConversion               [on/off]

        ファンクション kakuchou の機能を呼び出して文節拡張
        を行ったときに拡張した部分の文字をカレント文節と同じ
        文字種に再変換するかどうかを指定します。
        デフォルトは "off" です。
        sjx では文節拡張の度に変換バッファにあるすべての文字に
        ついて再変換しますので、このリソースを on にしても
        動作は同じにはなりません。

    15. 文節縮小時に拡張部分のモード変換を行なうか

[format]
.ShrinkModeConversion               [on/off]

        ファンクション syukusyou の機能を呼び出して文節縮小
        を行ったときに縮小した部分の文字をカレント文節と同じ
        文字種に再変換するかどうかを指定します。
        デフォルトは "off" です。
        sjx では文節縮小の度に変換バッファにあるすべての文字に
        ついて再変換しますので、このリソースを on にしても
        動作は同じにはなりません。

    16. 文節縮小時に１文字しかないときにカレント文節を前文節と
        合体するか

[format]
.ShrinkAll                          [on/off]

        文節縮小時にカレント文節が１文字しかないときにカレント文節
        と前文節とを合体してカレント文節を前文節に移すかどうかを
        指定します。デフォルトは "off" です。
        このリソースが off の時はカレント文節が１文字しかない
        とベルを鳴らしてそれ以上文節を縮小できません。

    17. 変換モードから入力モードに戻るときの動作

[format]
.FlushInConversion                  [on/off]

        UnConvMode のときにコントール・イベント・キー(各ファンクション
        動作に)割り当てられた以外のキーが押されたときに kettei の
        ファンクションを呼び出さなくても自動的に確定し、InputMode に
        戻るかどうかを on/off で指定します。デフォルトは "on" です。

    18. 変換モードでの文字消去時の動作

[format]
.DeleteChangeMode                   [on/off]

        UnConvMode のときに shoukyo のファンクションを呼び出
        したときに InputMode に戻ってかな単位で消去するか(on)
        UnConvMode のまま文節で消去するか(off)どうかを
        on/off で指定します。
        デフォルトは "off" です。

** 変換サーバ(sj3serv) のホスト名の決定

        first 変換サーバのホスト名は以下の優先度で決定されます。
        
            [1] オプション -sj3serv に続くホスト名
            [2] リソースファイルの *Sj3.sj3serv リソースに指定された値
            [3] 環境変数 SJ3SERV の値
            [4] NULL (つまり localhost)

        second 変換サーバのホスト名は以下の優先度で決定されます。
        
            [1] オプション -sj3serv2 に続くホスト名
            [2] リソースファイルの *Sj3.sj3serv2 リソースに指定された値
            [3] 環境変数 SJ3SERV2 の値
            [4] NULL (つまり localhost)

** 今後サポートを考えている機能

1. 辞書登録機能
2. Emacs で Edit 中に kinput2 の変換終了操作を
    行わないでも Emacs のキーバインドを生かせるように
    kinput2 を through するキーを sjrc 等で設定できるようにする。
3. コントロール character (Control-I 等)も正常に入力できるようにする。
4. 他にもこのような機能が欲しい、等の要望がありましたら
    お寄せください。もちろんそのサンプルコードを送っていただくことは
    大歓迎です。
