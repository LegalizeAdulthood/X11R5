/* $Header: /usr3/Src/emu/tdesc/RCS/global.tdesc,v 1.2 91/09/30 18:15:40 me Exp $ */

/*
 * Copyright 1990 by PCS Computer Systeme, GmbH. Munich, West Germany.
 *
 *                        All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for any purpose and without fee is hereby granted, 
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in 
 * supporting documentation, and that the names of PCS or the authors not
 * be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  
 * 
 * PCS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
 * PCS, THE AUTHORS, OR THEIR HOUSEPETS BE LIABLE FOR ANY SPECIAL, INDIRECT
 * OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE. SO DON'T SUE US. THANK YOU.
 *
 */

/*
 * Determine how various non-emulation specific things (like menus,
 * selections and the like) should work, plus generic setup code for
 * the tty.
 *
 * Author: Michael Elbel, Jordan Hubbard and Tom Bagli
 * Date: June 28th, 1990
 * Description: This file contains resource settings that determine how
 *		various completely UI specific aspects of the emu client
 *		and/or termCanvas widget are going to behave.
 *
 * Revision History:
 *
 * $Log:	global.tdesc,v $
Revision 1.2  91/09/30  18:15:40  me
*** empty log message ***

Revision 1.1  91/08/17  10:12:55  jkh
Initial revision

 *
 */

/* How to move around when the user clicks */
*term.motion-word:	\
	ALPHA MOTION_CONT MOTION_STOP

/* Popup Menu Resources */

/* Which menus to pop up on which events */
*term.screen.Translations: #override\n\
	Ctrl ~Shift<Btn1Down>:		XpEmuPopupMenu(menu1) \n\
	Ctrl ~Shift<Btn2Down>:		XpEmuPopupMenu(menu2, 302) \n\
	Ctrl ~Shift<Btn3Down>:		XpEmuPopupMenu(menu3, 303) \n\
	Ctrl  Shift<Btn3Down>:		XpEmuPopupMenu(menu4) \n

/* kludge alert */
#ifdef MOTIF
#define label labelString
#endif /* MOTIF */


/* MenuBar Resources */

*menuBar.numberMenus:			4

/* still kludge alert */
#ifdef MOTIF
*XmMenuShell.XmRowColumn.menuPost:	<Btn1Down>
#endif /* MOTIF */


/* MenuBar Menu Button Resources */

*menuButton1.label:			Main Options
*menuButton2.label:			Term Options
*menuButton3.label:			Font Options
*menuButton4.label:			Emulations

#ifdef MOTIF				/* CascadeButtonWidget */
*menuButton1.Translations: #override\n\
	<BtnDown>:			XpEmuPopupMenu(menu1)
*menuButton2.Translations: #override\n\
	<BtnDown>:			XpEmuPopupMenu(menu2, 302)
*menuButton3.Translations: #override\n\
	<BtnDown>:			XpEmuPopupMenu(menu3, 303)
*menuButton4.Translations: #override\n\
	<BtnDown>:			XpEmuPopupMenu(menu4)

*XmCascadeButton.fontList:		8x13bold

*XmForm*topOffset:			4
*XmCascadeButton.borderWidth:		0
*XmRowColumn.borderWidth:		0

#else /* ATHENA */			/* MenuButton Widget */
*menuButton1.Translations: #override\n\
	<BtnDown>:			reset()XpEmuPopupMenu(menu1)
*menuButton2.Translations: #override\n\
	<BtnDown>:			reset()XpEmuPopupMenu(menu2, 302)
*menuButton3.Translations: #override\n\
	<BtnDown>:			reset()XpEmuPopupMenu(menu3, 303)
*menuButton4.Translations: #override\n\
	<BtnDown>:			reset()XpEmuPopupMenu(menu4)

*MenuButton.font:			8x13bold

*MenuButton.borderWidth:		0
#endif /* MOTIF */


/* Menu Widget Resources */

#ifdef MOTIF				/* Menu Widget */

*XmLabelGadget*fontList:		8x13bold
*XmPushButtonGadget*fontList:		8x13

*titleSeparator.separatorType:		double_line

#else /* ATHENA */			/* SimpleMenu and smeBSB Widget */

*SimpleMenu*menuLabel.vertSpace:	100
*SimpleMenu*HorizontalMargins:		16
*SimpleMenu*Sme.height:			16

*SimpleMenu*BackingStore:		default
*SimpleMenu*Cursor:                     left_ptr
*SimpleMenu*menuLabel.font:		8x13bold
*SimpleMenu*SmeBSB.font:		8x13

*SmeBSB*menuItemMark:			xlogo11
*menu2.item4*menuItemMark:		opendot
*menu3*menuItemMark:			menu8

#endif /* MOTIF */


/*
 * General Menu and Menu Item Resources that determine what actions
 * are performed for which menu items (and what they announce they're
 * going to do).  For a translation of what the action codes are trying
 * to do, look at vt220-rops.
 */

*menu1.label:				Main Options
*menu2.label:				Term Options
*menu3.label:				Font Options
*menu4.label:				Emulations


*menu1.numberItems:			8

*menu1*item1.label:			Redraw
*menu1*item2.label:			Reset all
*menu1*item3.label:			Set TTY sane
*menu1*item4.label:			Set TTY origin
*menu1*item5.label:			Send INT signal
*menu1*item6.label:			Send HUP signal
*menu1*item7.label:			Send TERM signal
*menu1*item8.label:			Send KILL signal

*menu1.itemLines:			item1 item4

*menu1*item1.action:			310
*menu1*item2.action:			311
*menu1*item3.action:			312
*menu1*item4.action:			313
*menu1*item5.action:			316
*menu1*item6.action:			317
*menu1*item7.action:			318
*menu1*item8.action:			319


*menu2.numberItems:			5

*menu2*item1.label:			Set line wrap-around
*menu2*item2.label:			Set cursor blink
*menu2*item3.label:			Switch cursor underline (block)
*menu2*item4.label:			Set screen reverse-video
*menu2*item5.label:			Switch screen 80 (132) columns

*menu2*item1.action:			330
*menu2*item2.action:			331
*menu2*item3.action:			332
*menu2*item4.action:			333
*menu2*item5.action:			334


*menu3.numberItems:			6

*menu3*item1.label:			Select 6x13(bold) fonts
*menu3*item2.label:			Select 7x13(bold) fonts
*menu3*item3.label:			Select 7x14(bold) fonts
*menu3*item4.label:			Select 8x13(bold) fonts
*menu3*item5.label:			Select 9x15(bold) fonts
*menu3*item6.label:			Select original fonts

*menu3.itemLines:			item5

*menu3*item1.action:			350
*menu3*item2.action:			351
*menu3*item3.action:			352
*menu3*item4.action:			353
*menu3*item5.action:			354
*menu3*item6.action:			355

*menu4.numberItems:			3

*menu4*item1.label:			Glass tty
*menu4*item2.label:			vt220 (sort of)
*menu4*item3.label:			Simple Emu

*menu4*item1.action:			tty
*menu4*item2.action:			vt220
*menu4*item3.action:			semu

/*
 * Now define the action codes that make all this wonderfulness
 * possible, plus a global code for initializing the tty.
 */

*term.rops:								\
ROP_INIT_TTY		<%{Td,Ts}>					\
/* menu2 toggle checks */						\
302			<%{						\
			OP_CANVAS_WRAP_MODE C ga			\
			? MENU_ITEM_MARK "*menu2.item1" M		\
			: MENU_ITEM_UNMARK "*menu2.item1" M;		\
			OP_CANVAS_CURSOR_BLINKING C ga			\
			? MENU_ITEM_MARK "*menu2.item2" M		\
			: MENU_ITEM_UNMARK "*menu2.item2" M;		\
			OP_CANVAS_CURSOR_SIZE C gy 4 <			\
			? MENU_ITEM_MARK "*menu2.item3" M		\
			: MENU_ITEM_UNMARK "*menu2.item3" M;		\
			OP_CANVAS_REVERSE_MODE C ga			\
			? MENU_ITEM_MARK "*menu2.item4" M		\
			: MENU_ITEM_UNMARK "*menu2.item4" M;		\
			OP_CANVAS_SIZE C gx 80 =			\
			? MENU_ITEM_MARK "*menu2.item5" M		\
			: MENU_ITEM_UNMARK "*menu2.item5" M;		\
			}>						\
/* menu3 toggle checks */						\
303			<%{						\
			gF						\
			D 1 = ? MENU_ITEM_MARK "*menu3.item1" M		\
			      : MENU_ITEM_UNMARK "*menu3.item1" M ;	\
			D 2 = ? MENU_ITEM_MARK "*menu3.item2" M 	\
			      : MENU_ITEM_UNMARK "*menu3.item2" M ;	\
			D 3 = ? MENU_ITEM_MARK "*menu3.item3" M 	\
			      : MENU_ITEM_UNMARK "*menu3.item3" M ;	\
			D 4 = ? MENU_ITEM_MARK "*menu3.item4" M 	\
			      : MENU_ITEM_UNMARK "*menu3.item4" M ;	\
			D 5 = ? MENU_ITEM_MARK "*menu3.item5" M 	\
			      : MENU_ITEM_UNMARK "*menu3.item5" M ;	\
			D 0 = ? MENU_ITEM_MARK "*menu3.item6" M		\
			      : MENU_ITEM_UNMARK "*menu3.item6" M ;	\
			}>						\
/* redraw */								\
310			<%{OP_REDRAW_SCREEN C}>				\
/* Reset all */								\
311			<%{						\
			Td Ts						\
			OP_CLEAR_SCREEN C 0 0 px py OP_MOVE_ABS C	\
			15 pb OP_CLEAR_ATTRIBUTE C			\
			ROP_INIT_CANVAS R				\
			}>						\
/* Set TTY sane */							\
312			<%Td%Ts>					\
/* Set TTY from original terminal */					\
313			<%Ti%Ts>					\
/* Print TTY sane setting */						\
314			<%{Td CB_STR_TYPE @ ba}>			\
/* Print TTY original setting */					\
315			<%{Ti CB_STR_TYPE @ ba}>			\
/* Interrupt signal */							\
316			<%{2 k}>					\
/* Hangup signal */							\
317			<%{1 k}>					\
/* Terminate signal */							\
318			<%{15 k}>					\
/* KILL signal */							\
319			<%{9 k}>					\
/* line wrap-around */							\
330			<%{						\
			OP_CANVAS_WRAP_MODE C ga			\
			? OP_DONT_WRAP C				\
			: OP_WRAP_AROUND C ;}>				\
/* cursor blinkification */						\
331			<%{						\
			OP_CANVAS_CURSOR_BLINKING C ga			\
			? 0 pa OP_SET_CURSOR_BLINK C			\
			: 1 pa OP_SET_CURSOR_BLINK C ;}>		\
/* cursor underline (block) */						\
332			<%{						\
			OP_CANVAS_CURSOR_SIZE C	gy 4 <			\
			? 0 py OP_SET_CURSOR_SIZE C			\
			: 3 py OP_SET_CURSOR_SIZE C ;}>			\
/* screen (canvas) reversification */					\
333			<%{						\
			OP_CANVAS_REVERSE_MODE C ga			\
			? OP_NORMAL_VIDEO C				\
			: OP_REVERSE_VIDEO C ;}>			\
/* 80 / 132 columns */							\
334			<%{						\
			OP_CANVAS_SIZE C gx 80 =			\
			? 132 px OP_SET_SCREEN_SIZE C			\
			: 80 px OP_SET_SCREEN_SIZE C ;}>		\
/* 6x13(bold) font */							\
350			<%{						\
			"6x13" pa "6x13bold" pb OP_CHANGE_FONTS C	\
			1 pF						\
			}>						\
/* 7x13(bold) font */							\
351			<%{						\
			"7x13" pa "7x13bold" pb OP_CHANGE_FONTS C	\
			2 pF						\
			}>						\
/* 7x14(bold) font */							\
352			<%{						\
			"7x14" pa "7x14bold" pb OP_CHANGE_FONTS C	\
			3 pF						\
			}>						\
/* 8x13(bold) font */							\
353			<%{						\
			"8x13" pa "8x13bold" pb OP_CHANGE_FONTS C	\
			4 pF						\
			}>						\
/* 9x15(bold) font */							\
354			<%{						\
			"9x15" pa "9x15bold" pb OP_CHANGE_FONTS C	\
			5 pF						\
			}>						\
/* original fonts */							\
355			<%{						\
			"" pa "" pb OP_CHANGE_FONTS C			\
			0 pF						\
			}>
